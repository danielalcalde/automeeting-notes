#!/usr/bin/env python3
import argparse
import os, sys
import glob
import re

from filelock import FileLock
from concurrent.futures import ThreadPoolExecutor

import numpy as np
from whisper.tokenizer import LANGUAGES, TO_LANGUAGE_CODE
from whisper.utils import  optional_float, optional_int, str2bool
from whisper import available_models

from automeeting_notes import diarize_text, write_to_txt, Models


def parse_arguments(args=None):
    if args is None:
        args = sys.argv[1:]

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    #parser.add_argument("audio", nargs="+", type=str, help="audio file(s) or regular expresion of to transcribe")
    #better help message
    parser.add_argument("audio", nargs="+", type=str, help="audio file(s) or /path/to/folder/*.mp3")
    
    parser.add_argument("--model", "-m", default="large", choices=available_models(), help="name of the Whisper model to use")
    parser.add_argument("--output_dir", "-o", type=str, default=".", help="directory to save the outputs")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="whether to print out the progress and debug messages")
    parser.add_argument("--overwrite_transcript", "-w", action="store_true",
                        help="whether to overwrite the transcript if it already exists")
    
    parser.add_argument("--task", type=str, default="transcribe", choices=["transcribe", "translate"],
                        help="whether to perform X->X speech recognition ('transcribe') or X->English translation ('translate')")
    parser.add_argument("--language", type=str, default=None,
                        choices=sorted(LANGUAGES.keys()) + sorted([k.title() for k in TO_LANGUAGE_CODE.keys()]),
                        help="language spoken in the audio, specify None to perform language detection")

    parser.add_argument("--temperature", type=float, default=0.7, help="temperature to use for sampling")
    parser.add_argument("--best_of", type=optional_int, default=5,
                        help="number of candidates when sampling with non-zero temperature")
    parser.add_argument("--beam_size", type=optional_int, default=5,
                        help="number of beams in beam search, only applicable when temperature is zero")
    parser.add_argument("--patience", type=float, default=None,
                        help="optional patience value to use in beam decoding, as in https://arxiv.org/abs/2204.05424, the default (1.0) is equivalent to conventional beam search")
    parser.add_argument("--length_penalty", type=float, default=None,
                        help="optional token length penalty coefficient (alpha) as in https://arxiv.org/abs/1609.08144, uses simple length normalization by default")

    parser.add_argument("--suppress_tokens", type=str, default="-1",
                        help="comma-separated list of token ids to suppress during sampling; '-1' will suppress most special characters except common punctuations")
    parser.add_argument("--initial_prompt", type=str, default=None,
                        help="optional text to provide as a prompt for the first window.")
    parser.add_argument("--condition_on_previous_text", type=str2bool, default=True,
                        help="if True, provide the previous output of the model as a prompt for the next window; disabling may make the text inconsistent across windows, but the model becomes less prone to getting stuck in a failure loop")
    parser.add_argument("--fp16", type=str2bool, default=True,
                        help="whether to perform inference in fp16; True by default")

    parser.add_argument("--temperature_increment_on_fallback", type=optional_float, default=0.2,
                        help="temperature to increase when falling back when the decoding fails to meet either of the thresholds below")
    parser.add_argument("--compression_ratio_threshold", type=optional_float, default=2.4,
                        help="if the gzip compression ratio is higher than this value, treat the decoding as failed")
    parser.add_argument("--logprob_threshold", type=optional_float, default=-1.0,
                        help="if the average log probability is lower than this value, treat the decoding as failed")
    parser.add_argument("--no_speech_threshold", type=optional_float, default=0.6,
                        help="if the probability of the <|nospeech|> token is higher than this value AND the decoding has failed due to `logprob_threshold`, consider the segment as silence")
    parser.add_argument("--output_name", type=str, default="",
                        help="output file name; if not specified, the output file name will be the same as the input file name")

    args = parser.parse_args(args).__dict__
    model_name = args.pop("model")
    output_dir = args.pop("output_dir")
    output_name = args.pop("output_name")
    overwrite_transcript = args.pop("overwrite_transcript")

    return args, model_name, output_dir, output_name, overwrite_transcript

def extract_audio(audio):
    # Check if regex
    if re.match(r"\/.*\/.*", audio[0]): # Check if the audio is a regex
        # get the current directory
        rootdir = os.getcwd()
        regex = re.compile(audio[0])
        audio = []
        for root, dirs, files in os.walk(rootdir):
            for file in files:
                if regex.match(file):
                    audio.append(os.path.join(root, file))
    
    elif '*' in audio[0]:
        audio = glob.glob(audio[0])

    elif os.path.isdir(audio[0]): # Check if the audio is a folder and if so, get all the files in the folder
        audio = [os.path.join(audio[0], f) for f in os.listdir(audio[0]) if os.path.isfile(os.path.join(audio[0], f))]
    
    return audio

def main(args=None):
    args, model_name, output_dir, output_name, overwrite_transcript = parse_arguments(args)
    os.makedirs(output_dir, exist_ok=True)
    models = Models(whisper_model_name=model_name, verbose=args["verbose"])

    temperature = float(args.pop("temperature"))
    temperature_increment_on_fallback = args.pop("temperature_increment_on_fallback")

    if temperature_increment_on_fallback is not None:
        temperature = tuple(np.arange(temperature, 1.0 + 1e-6, temperature_increment_on_fallback))
    else:
        temperature = [temperature]
    
    audio = extract_audio(args.pop("audio"))

    for audio_path in audio:
        audio_basename = os.path.basename(audio_path)
        filepath_simple = os.path.join(output_dir, audio_basename + output_name + ".txt")
        filepath_timestamp = os.path.join(output_dir, audio_basename + output_name + "_timestamp.txt")
        #Make directory for lock files
        os.makedirs(os.path.join(output_dir, ".lock"), exist_ok=True)
        file_lock_name = os.path.join(output_dir, ".lock", audio_basename + ".lock")
        file_lock = FileLock(file_lock_name)
        if not overwrite_transcript and os.path.isfile(filepath_simple):
            print(f"Skipping {audio_path} as the transcript already exists.")
            continue
        elif os.path.isfile(file_lock_name):
            print(f"Skipping {audio_path} as it is locked.")
            continue

        with file_lock:
            #result = models.transcribe(audio_path, temperature=temperature, **args)
            #diarization_result = models.diarize(audio_path)
            # Do both at the same time with threading
            with ThreadPoolExecutor(max_workers=2) as executor:
                future1 = executor.submit(models.transcribe, audio_path, temperature, **args)
                future2 = executor.submit(models.diarize, audio_path)

                result = future1.result()
                diarization_result = future2.result()
            

            res = diarize_text(result, diarization_result)
            write_to_txt(res, filepath_simple, style="simple")
            write_to_txt(res, filepath_timestamp, style="timestamp")
        # Remove the lock
        os.remove(file_lock_name)



if __name__ == '__main__':
    args = sys.argv[1:]
    main(args)
